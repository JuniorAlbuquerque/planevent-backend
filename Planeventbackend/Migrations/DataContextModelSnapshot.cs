// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Planeventbackend.Data;

namespace Planeventbackend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Planeventbackend.Models.EventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("Userid");

                    b.HasKey("Id");

                    b.HasIndex("Userid")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Planeventbackend.Models.UserEventModel", b =>
                {
                    b.Property<int>("Userid")
                        .HasColumnType("integer");

                    b.Property<int>("Eventid")
                        .HasColumnType("integer");

                    b.HasKey("Userid", "Eventid");

                    b.HasIndex("Eventid");

                    b.ToTable("userEvents");
                });

            modelBuilder.Entity("Planeventbackend.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Birthdate")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Sex")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Planeventbackend.Models.EventModel", b =>
                {
                    b.HasOne("Planeventbackend.Models.UserModel", "User")
                        .WithOne("Events")
                        .HasForeignKey("Planeventbackend.Models.EventModel", "Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planeventbackend.Models.UserEventModel", b =>
                {
                    b.HasOne("Planeventbackend.Models.EventModel", "Event")
                        .WithMany("UserEventModels")
                        .HasForeignKey("Eventid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planeventbackend.Models.UserModel", "User")
                        .WithMany("UserEventModels")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planeventbackend.Models.EventModel", b =>
                {
                    b.Navigation("UserEventModels");
                });

            modelBuilder.Entity("Planeventbackend.Models.UserModel", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("UserEventModels");
                });
#pragma warning restore 612, 618
        }
    }
}
